<?php

declare(strict_types=1);

/**
 * This file is part of phpDocumentor.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * @link http://phpdoc.org
 */

namespace phpDocumentor;

use Composer\Autoload\ClassLoader;
use RuntimeException;
use function file_exists;

final class AutoloaderLocator
{
    public static function autoload() : ClassLoader
    {
        return require static::findVendorPath() . '/autoload.php';
    }

    /**
     * Attempts to find the location of the vendor folder.
     *
     * This method tries to check for a composer.json in a directory 5 levels below the folder of this Bootstrap file.
     * This is the expected location if phpDocumentor is installed using composer because the current directory for
     * this file is expected to be 'vendor/phpdocumentor/phpdocumentor/src/phpDocumentor'.
     *
     * If composer uses a custom composer.json filename with
     * {@link https://getcomposer.org/doc/03-cli.md#composer COMPOSER environment variable} or a custom vendor directory
     * name with {@link https://getcomposer.org/doc/03-cli.md#composer-vendor-dir COMPOSER_VENDOR_DIR}
     * or with a 'vendor-dir' entry in composer.json, the vendor folder won't be named 'vendor' so we base
     * the matching on the presence of the autoload.php file generated by composer during install.
     *
     * @param  string $baseDir parameter for test purposes only.
     *
     * @return string The vendor directory path
     *
     * @throws RuntimeException If the vendor directory is not findable.
     */
    public static function findVendorPath(string $baseDir = __DIR__) : string
    {
        // default installation
        $vendorDir = $baseDir . '/../../vendor';
        // Composerised installation, vendor/phpdocumentor/phpdocumentor/src/phpDocumentor is __DIR__
        $vendorFolderWhenInstalledWithComposer = $baseDir . '/../../../../';
        if (file_exists($vendorFolderWhenInstalledWithComposer . '/autoload.php')) {
            $vendorDir = $vendorFolderWhenInstalledWithComposer;
        }

        $vendorDir = realpath($vendorDir);
        if ($vendorDir === false) {
            throw new RuntimeException('Unable to find vendor directory for ' . $baseDir);
        }

        return $vendorDir;
    }
}
