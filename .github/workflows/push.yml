on: push
name: Qa workflow
jobs:
  composer:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Restore/cache vendor folder
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: composer
      uses: docker://composer
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: install --no-interaction --prefer-dist --optimize-autoloader
    - name: composer-require-checker
      uses: docker://phpga/composer-require-checker-ga
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: check --config-file ./composer-require-config.json composer.json
  phpunit-with-coverage:
    runs-on: ubuntu-latest
    name: Unit tests
    needs: composer
    steps:
    - uses: actions/checkout@master
    - name: Restore cached vendor folder
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: Setup PHP
      uses: shivammathur/setup-php@master
      with:
        php-version: 7.2
        extension-csv: mbstring, intl, iconv, libxml, dom, json, simplexml, zlib
        ini-values-csv: memory_limit=2G, display_errors=On, error_reporting=-1
        coverage: xdebug
        pecl: false
    - name: 'Install PHPUnit'
      run: composer global require phpunit/phpunit ^8
    - name: Run PHPUnit
      run: $HOME/.composer/vendor/bin/phpunit
  phpunit:
    runs-on: ${{ matrix.operating-system }}
    strategy:
      matrix:
        operating-system: [ubuntu-latest, windows-latest, macOS-latest]
        php-versions: ['7.2', '7.3']
    name: Unit tests for PHP version ${{ matrix.php-versions }} on ${{ matrix.operating-system }}
    needs:
    - composer
    - phpunit-with-coverage
    steps:
    - uses: actions/checkout@master
    - name: Restore cached vendor folder
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: Setup PHP
      uses: shivammathur/setup-php@master
      with:
        php-version: ${{ matrix.php-versions }}
        extension-csv: mbstring, intl, iconv, libxml, dom, json, simplexml, zlib
        ini-values-csv: memory_limit=2G, display_errors=On, error_reporting=-1
        pecl: false
    - name: 'Install PHPUnit'
      run: composer global require phpunit/phpunit ^8
    - name: Run PHPUnit
      run: $HOME/.composer/vendor/bin/phpunit
  codestyle:
    runs-on: ubuntu-latest
    needs: [composer, phpunit]
    steps:
    - uses: actions/checkout@master
    - name: Restore cached vendor folder
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: Code style check
      uses: docker://oskarstark/phpcs-ga
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: -d memory_limit=1024M
  phpstan:
    runs-on: ubuntu-latest
    needs: [composer, phpunit]
    steps:
    - uses: actions/checkout@master
    - name: Restore cached vendor folder
      uses: actions/cache@v1
      with:
        path: vendor
        key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.OS }}-build-${{ env.cache-name }}-
          ${{ runner.OS }}-build-
          ${{ runner.OS }}-
    - name: PHPStan
      uses: docker://phpdoc/phpstan-ga:master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        args: analyse src tests --level 3 --configuration phpstan.neon
